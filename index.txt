int greenpotential(Chessboard chessboard_test.chessboard){
int value=0;
for(int a=0;a<=15;a+=2){
    if(chessboard_test.chessboard[look_for_intersection[a/2][0]][look_for_intersection[a/2][1]]==who){
  if(chessboard_test.chessboard[look_for[a][0]][look_for[a][1]]==0&&chessboard_test.chessboard[look_for[a+1][0]][look_for[a+1][1]]==0)
  {value+=greenPotential[0];}
  else if(chessboard_test.chessboard[look_for[a][0]][look_for[a][1]]==-who&&chessboard_test.chessboard[look_for[a+1][0]][look_for[a+1][1]]==-who)   
  {value+=greenPotential[1];}
  else if((chessboard_test.chessboard[look_for[a][0]][look_for[a][1]]==who||chessboard_test.chessboard[look_for[a+1][0]][look_for[a+1][1]]==who)&&(chessboard_test.chessboard[look_for[a][0]][look_for[a][1]]==0||chessboard_test.chessboard[look_for[a+1][0]][look_for[a+1][1]]==0))
  {value+=greenPotential[2];}
  else if(chessboard_test.chessboard[look_for[a][0]][look_for[a][1]]==who&&chessboard_test.chessboard[look_for[a+1][0]][look_for[a+1][1]]==who)
  {value+=greenPotential[4];}
  }
  else if(chessboard_test.chessboard[look_for_intersection[a/2][0]][look_for_intersection[a/2][1]]==0)
  {  if(chessboard_test.chessboard[look_for[a][0]][look_for[a][1]]==who&&chessboard_test.chessboard[look_for[a+1][0]][look_for[a+1][1]]==who)
     {value+=greenPotential[5];}
     else if(chessboard_test.chessboard[look_for[a][0]][look_for[a][1]]==-who&&chessboard_test.chessboard[look_for[a+1][0]][look_for[a+1][1]]==-who)   
     {value+=greenPotential[6];}
     else if((chessboard_test.chessboard[look_for[a][0]][look_for[a][1]]==who||chessboard_test.chessboard[look_for[a+1][0]][look_for[a+1][1]]==who)&&(chessboard_test.chessboard[look_for[a][0]][look_for[a][1]]==0||chessboard_test.chessboard[look_for[a+1][0]][look_for[a+1][1]]==0))
    { value+=greenPotential[7];}
    else if((chessboard_test.chessboard[look_for[a][0]][look_for[a][1]]==-who||chessboard_test.chessboard[look_for[a+1][0]][look_for[a+1][1]]==-who)&&(chessboard_test.chessboard[look_for[a][0]][look_for[a][1]]==0||chessboard_test.chessboard[look_for[a+1][0]][look_for[a+1][1]]==0))
     {value+=greenPotential[9];}
}
else if(chessboard_test.chessboard[look_for_intersection[a/2][0]][look_for_intersection[a/2][1]]==-who){
 if(chessboard_test.chessboard[look_for[a][0]][look_for[a][1]]==0&&chessboard_test.chessboard[look_for[a+1][0]][look_for[a+1][1]]==0 )
  {value+=greenPotential[11];}
else if(chessboard_test.chessboard[look_for[a][0]][look_for[a][1]]==-who&&chessboard_test.chessboard[look_for[a+1][0]][look_for[a+1][1]]==-who)   
  {value+=greenPotential[12];}
else if(chessboard_test.chessboard[look_for[a][0]][look_for[a][1]]==who&&chessboard_test.chessboard[look_for[a+1][0]][look_for[a+1][1]]==who)
  {value+=greenPotential[13];}
else if((chessboard_test.chessboard[look_for[a][0]][look_for[a][1]]==who||chessboard_test.chessboard[look_for[a+1][0]][look_for[a+1][1]]==who)&&(chessboard_test.chessboard[look_for[a][0]][look_for[a][1]]==0||chessboard_test.chessboard[look_for[a+1][0]][look_for[a+1][1]]==0))
  {value+=greenPotential[14];}
}
}
return value;
}
int arc_count(int chessboard_test.chessboard[][6]){
  int count=0;
  for(int a=0;a<20;a++)
  {
    if(chessboard_test.chessboard[look_for_arc[a][0]][look_for_arc[a][1]]==who)
    count++;
    else if(chessboard_test.chessboard[look_for_arc[a][0]][look_for_arc[a][1]]==-who)
    count--;
  }
  return count;
}
int anotherMark(int chessboard_test.chessboard[][6]){
int count=0;
for(int a=0;a<=9;a+=3){
if(chessboard_test.chessboard[look_for_anotherMark[a][0]][look_for_anotherMark[a][1]]==who)
{
  if(chessboard_test.chessboard[look_for_anotherMark[a+1][0]][look_for_anotherMark[a+1][1]]==-who&&chessboard_test.chessboard[look_for_anotherMark[a+1][0]][look_for_anotherMark[a+1][1]]==-who)
  count++;
}
else if(chessboard_test.chessboard[look_for_anotherMark[a][0]][look_for_anotherMark[a][1]]==-who){
  if(chessboard_test.chessboard[look_for_anotherMark[a+1][0]][look_for_anotherMark[a+1][1]]==who&&chessboard_test.chessboard[look_for_anotherMark[a+1][0]][look_for_anotherMark[a+1][1]]==who)
  count--;
}
}
return count;
}