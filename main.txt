//用于测试alphabeta
{Hash_Board_Init(Hash_Board);

 FILE *fp;
fp=fopen("/Users/bluesky/Desktop/Surakarta_Zero/Data/testAlphaBeta1.txt","r");
if(fp==NULL){
printf("open Error\n");
return 0;
}
test_alpha_beta(fp);
}
//用于测试movegenerator
{
/* FILE *fp;
fp=fopen("/Users/bluesky/Desktop/Surakarta_Zero/Data/testMoveGenerate.txt","r");
test(fp);*/
}
//测试move_generator速度
{   /* who=-1;
    Move_List *h;
    int count=0,flag;
    double duration;
     
    clock_t start,stop;
    start=clock();
    while(count<=10000000)
    {count++;
     h=(Move_List *)malloc(100*sizeof(Move));
     Move_Generate(h,1);
     free(h);
     h=(Move_List *)malloc(100*sizeof(Move));
     Move_Generate(h,-1);
     free(h);
    }
    stop=clock();
    duration=((double)(stop-start))/CLOCKS_PER_SEC;
    printf("time=%.1lfs\n",duration);
*/
}
     if(e.type==SDL_KEYDOWN){
            if(e.key.keysym.sym==SDLK_RIGHT)
                choice=-1;
            else if(e.key.keysym.sym==SDLK_LEFT)
                choice=1;
            else if(e.key.keysym.sym==SDLK_RETURN)
                return choice;
        }
        if(choice==-1){
            SDL_RenderCopy(ren, Blackmini, NULL, &blackmini);
            SDL_RenderCopy(ren, Whitemax, NULL, &whitemax);
        }
        else if(choice==1){
            SDL_RenderCopy(ren, Blackmax, NULL, &blackmax);
            SDL_RenderCopy(ren, Whitemini, NULL, &whitemini);
        }
    /*
FILE *index_fp=fopen("/Users/bluesky/Desktop/Surakarta_Zero/Battle/index.txt","r");
int index;
fscanf(index_fp,"%d",&index);
index_fp=fopen("/Users/bluesky/Desktop/Surakarta_Zero/Battle/index.txt","w");
fprintf(index_fp,"%d",index+1);
record_pre(index);
fclose(index_fp);

int count=0;
Chessboard_Init(chessboard);
while(count<=1){
run();
count++;
printf("%d\n",count);
printf("end\n");
}*/